FORMAT: 1A
HOST: http://api.mgduke.com/v1/

# Allegro

Our API is orginized as a set of plain [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) services.
Which operates defined data entiries.

There are two major security roles for API usage, `producer` read/write access
and `consumer` which is essentially has a read only access.

Consumers can `GET` resources.
Producers can `POST`, `PUT`, `COPY`, `HEAD`, `DELETE` resources.

HTTP status codes meaning

* 200 (OK) - request good!
* 302 (Found) - Redirects
* 400 (Bad request) - occurs when you have a malformed request, fix it and try again
* 404 (Not found) - occurs when you request a route that does not exist, fix it and try again
* 500 (Internal server error) - Server got itself in trouble; get in touch with us.

There are following API subsystems available.

* Auth - responsible for device and user authentication and API load balancing
* Device Core - services for synchronization of device data and other device related API's

# Group Auth

- User authentication ( login + password -> grants API consumer access_token )
- Device authentication ( Hardware ID hash + secret key -> grants API producer access_token )

# Group Device Core

- Device firmware auto update ( By Device HW ID (SHA5) -> Device model range (RPI1) fallback )
- Device feed synchronization ( auth by producer access_token, device -> server main feed )
- Device feed forwarder ( auth by consumer access_token, configurable feed forwarder )
- Device realtime callbacks ( auth by consumer access_token, rules for IO - triggered callbacks )

# Group Device <-> mobile

- Device configuration 
- Phone sensors API (date, GPS, accelerometer)
- Batch feed synchronization via Bluetooth LE bridge (device -> bluetooth le -> phone -> internet -> server).

# Group Aggregation services

- Device historical reports ( auth by consumer access_token, OBD key-value pairs, GPS data, Accelerometer data )
- Geofence ( auth by consumer access_token, API operates with GPS coordinates + radius and enter & exit events )
- Diagnostic notifications ( auth by consumer access_token, for pushing diagnostic warnings & errors )
- Events notification ( auth by consumer access_token, audio, mobile push, email, IFTT, achivements engine )


## Device Authentication

Internal API for device authentication.

Device authentication is implemented using JWT (Bearer Token) approach

- [Apiary, authentication guide](https://help.apiary.io/api_101/authentication/#token)
- [Apiary, Bearer Token implementation](https://help.apiary.io/api_101/authentication/#token)
- [Apiary, obtaining token](http://docs.apiaryauthorizationapi.apiary.io/#introduction/obtaining-credentials)
- [Apiary, JWT example](http://docs.apiaryauthorizationapi.apiary.io/#reference/0/jwt-validation)
- [Nginx Plus natively supported](https://www.nginx.com/blog/authenticating-api-clients-jwt-nginx-plus/)
- [OpenID is part of OAuth 2.0 ecosystem](http://openid.net/connect/)
- [Detailed IETF doc](https://tools.ietf.org/html/rfc7519)

## GeoFence API

[Geofence API example](https://developer.android.com/training/location/geofencing.html)

## OAuth token exchange [/oauth/token]
Exchange credentials for `access_token`. Supported types:

+ `client_credentials`
+ [`urn:ietf:params:oauth:grant-type:jwt-bearer`](https://tools.ietf.org/html/draft-jones-oauth-jwt-bearer-03#section-6)

### Exchange credentials for token [POST]
+ Request
    + Attributes (OAuth grant request)
    + Headers

            Authorization: Basic ABCDEF

+ Response 200 (application/json)
    + Attributes (OAuth valid response)

+ Request
    + Attributes (OAuth jwt bearer grant request)

+ Response 200 (application/json)
    + Attributes (OAuth valid response)

## OAuth 2 Bearer Token protected resource [/protected]
### Status [GET]
+ Request
    + Headers

            Authentication: Bearer JWT

+ Response 200 (application/json)
    + Attributes (Server response)

# Data Structures
## OAuth grant request (object)
+ `grant_type`: `client_credentials` (string, required)

## OAuth jwt bearer grant request (object)
+ `grant_type`: `urn:ietf:params:oauth:grant-type:jwt-bearer` (string, required)
+ assertion: `eyJhbGciOiJIUzI1NiJ9.e30.XmNK3GpH3Ys_7wsYBfq4C3M6goz71I7dTgUkuIa5lyQ` (string, required)

## OAuth valid response (object)
+ `access_token`: `eyJhbGciOiJIUzI1NiJ9.e30.XmNK3GpH3Ys_7wsYBfq4C3M6goz71I7dTgUkuIa5lyQ` (string, required) - valid JWT
+ scope: all (string, required) - scopes of current token
+ `expires_in`: 300 (number, required)
+ `token_type`: Bearer (string, required)

## Server response (object)
+ status: ok (string, required)




## Questions Collection [/questions]

### List All Questions [GET]

+ Response 200 (application/json)

        [
            {
                "question": "Favourite programming language?",
                "published_at": "2015-08-05T08:40:51.620Z",
                "choices": [
                    {
                        "choice": "Swift",
                        "votes": 2048
                    }, {
                        "choice": "Python",
                        "votes": 1024
                    }, {
                        "choice": "Objective-C",
                        "votes": 512
                    }, {
                        "choice": "Ruby",
                        "votes": 256
                    }
                ]
            }
        ]

### Create a New Question [POST]

You may create your own question using this action. It takes a JSON
object containing a question and a collection of answers in the
form of choices.

+ Request (application/json)

        {
            "question": "Favourite programming language?",
            "choices": [
                "Swift",
                "Python",
                "Objective-C",
                "Ruby"
            ]
        }

+ Response 201 (application/json)

    + Headers

            Location: /questions/2

    + Body

            {
                "question": "Favourite programming language?",
                "published_at": "2015-08-05T08:40:51.620Z",
                "choices": [
                    {
                        "choice": "Swift",
                        "votes": 0
                    }, {
                        "choice": "Python",
                        "votes": 0
                    }, {
                        "choice": "Objective-C",
                        "votes": 0
                    }, {
                        "choice": "Ruby",
                        "votes": 0
                    }
                ]
            }